package tk.yteditors.requiredstuffz.block;

import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.renderer.texture.IIconRegister;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.IIcon;
import net.minecraft.util.MathHelper;
import net.minecraft.world.World;
import tk.yteditors.requiredstuffz.RequiredStuffz;
import tk.yteditors.requiredstuffz.item.ItemUnbakedPizza;
import tk.yteditors.requiredstuffz.reference.ModInfo;
import tk.yteditors.requiredstuffz.tileentity.TileEntityOven;
import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

public class BlockOven extends Block {
	
	enum Texture {
		ON_HAS_ITEM,
		OFF_HAS_ITEM,
		ON_EMPTY,
		OFF_EMPTY
	}
	
	@SideOnly(Side.CLIENT)
	private IIcon blockIconFront, blockIconTop, blockIconSide;

	int rotation;
	
	public final boolean burning;
	public final boolean hasPizza;

	public BlockOven(boolean burning, boolean hasPizza) {
		super(Material.rock);
		setStepSound(this.soundTypeStone);
		setHardness(2f);
		setResistance(3.5f);
		setHarvestLevel("pickaxe", 0);
		this.burning = burning;
		this.hasPizza = hasPizza;
		
		//if(!burning && !hasPizza){
			setCreativeTab(CreativeTabs.tabBlock);
		//}
	}

	@SideOnly(Side.CLIENT)
	public void registerBlockIcons(IIconRegister register) {
		if(burning){
			if(hasPizza){
				blockIconFront = register.registerIcon(ModInfo.modId + ":blockOven_front_on_filled");
			}else{
				blockIconFront = register.registerIcon(ModInfo.modId + ":blockOven_front_on_empty");
			}
		}else{
			if(hasPizza){
				blockIconFront = register.registerIcon(ModInfo.modId + ":blockOven_front_off_filled");
			}else{
				blockIconFront = register.registerIcon(ModInfo.modId + ":blockOven_front_off_empty");
			}
		}
		blockIconTop = register.registerIcon(ModInfo.modId + ":blockOven_top");
		blockIconSide = register.registerIcon(ModInfo.modId + ":blockOven_side");
	}

	/**
	 * Return icons
	 */
	@SideOnly(Side.CLIENT)
	public IIcon getIcon(int side, int metadata) {
		if (metadata == 0 && side == 3) {
			return blockIconFront;
		} else if (side == 0 || side == 1) {
			return blockIconTop;
		} else if (metadata == side) {
			return blockIconFront;
		} else {
			return blockIconSide;
		}
	}

	/**
	 * Set block orientation according to player's face
	 */
	@Override
	public void onBlockPlacedBy(World world, int x, int y, int z,
			EntityLivingBase entityliving, ItemStack itemStack) {
		byte direction = 0;
		int facing = MathHelper
				.floor_double((double) ((entityliving.rotationYaw * 4F) / 360F) + 0.5D) & 3;

		if (facing == 0) {
			direction = 2;
		}
		if (facing == 1) {
			direction = 5;
		}
		if (facing == 2) {
			direction = 3;
		}
		if (facing == 3) {
			direction = 4;
		}
		world.setBlockMetadataWithNotify(x, y, z, direction, 2);

	}
	
	public Item getItemDropped(World world, int x, int y, int z){
		return Item.getItemFromBlock(this);
	}
	
	/**
	 * Gets an item for the block being called on.
	 */
	public Item getItem(World world, int x, int y, int z) {
		return Item.getItemFromBlock(RequiredStuffz.blockOvenOffEmpty);
	}

	public TileEntity createTileEntity(World world, int metadata) {
		return new TileEntityOven();
	}
	
	/*public boolean onBlockActivated(World world, int x, int y, int z, EntityPlayer player, int par6, float par7, float par8, float par9){
		TileEntity entity = world.getTileEntity(x, y, z);
		if(player.getItemInUse().getItem().getClass() == ItemUnbakedPizza.class && entity != null){
			if(world.getTileEntity(x, y, z) instanceof TileEntityOven){
				ItemStack stack = player.getItemInUse().splitStack(1);
				((TileEntityOven) entity).addItem(stack.getItem());
				world.markBlockForUpdate(x, y, z);
			}
		}
		return true;
	}*/
	
	public static void updateBlockState(boolean burning, World world, int x, int y, int z){
		
	}
	
}
